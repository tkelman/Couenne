#
# Couenne options
#
# Couenne is an open-source solver for nonconvex Mixed-Integer 
# Nonlinear Programming (MINLP) problems. See more at 
# 
# https://projects.coin-or.org/Couenne
#
# The following is a list of option to tweak the performance of Couenne.
# Each option has a brief description and is set to a default value that we believe
# works well in most cases. in square brackets are given the possible values


#
# Verbosity/output level options
#

# display statistics at the end of the run [yes/no]
display_stats no

# The following are verbosity levels for the main components of Couenne. 
# Values: 0 for quiet, 11 for excessive output [0..11]

branching_print_level       0 # Output level for braching code in Couenne.
boundtightening_print_level 0 # Output level for bound tightening code in Couenne
convexifying_print_level    0 # Output level for convexifying code in Couenne
problem_print_level         4 # Output level for problem manipulation code in Couenne (4 prints out original problem)
nlpheur_print_level         0 # Output level for NLP heuristic in Couenne
#disjcuts_print_level       0 # Output level for disjunctive cuts in Couenne - disabled for now


#
# Option for branching rules
#

# Multipliers of pseudocosts for estimating and update estimation of bound
pseudocost_mult

# Use distance between LP points to update multipliers of pseudocosts "  
pseudocost_mult_lp

# Use Special Ordered Sets (SOS) as indicated in the MINLP model
enable_sos

# Apply bound tightening before branching
branch_fbbt

# Apply convexification cuts before branching (for now only within strong branching)
branch_conv_cuts

# Chooses branching point selection strategy
branch_pt_select

# Defines convex combination of mid point and current LP point: "
branch_midpoint_alpha

# Defines safe interval percentage for using LP point as a branching point
branch_lp_clamp

# Priority of continuous variable branching
cont_var_priority

# Apply Reduced Cost Branching (instead of the Violation Transfer) -- MUST have vt_obj enabled
red_cost_branching

# type of branching object for variable selection
branching_object


#
# Options for bound tightening
#

# Feasibility-based (cheap) bound tightening
feasibility_bt

# Optimality-based (expensive) bound tightening
optimality_bt

log_num_obbt_per_level
# Specify the frequency (in terms of nodes) for optimality-based bound tightening.

aggressive_fbbt
# Aggressive feasibility-based bound tightening (to use with NLP points)

log_num_abt_per_level
# Specify the frequency (in terms of nodes) for aggressive bound tightening.


#
# Options for reformulation and linearization
#

# Specify the frequency (in terms of nodes) at which couenne ecp cuts are generated.
convexification_cuts

# Determines in which point the linear over/under-estimator are generated
convexification_type

convexification_points
# Specify the number of points at which to convexify when convexification type"

violated_cuts_only
# Yes if only violated convexification cuts should be added



#
# Options for debugging
#
# Some of these options usually slow down Couenne, and are hence only suggested for debugging purposes.
#

# Check all LPs through an independent call to OsiClpSolverInterface::initialSolve()
check_lp

# Artificial cutoff
art_cutoff

# Window around known optimum
opt_window

# Artificial lower bound
art_lower


#
# Other options
#

# Do we search for local solutions of NLP's?
local_optimization_heuristic

# Specify the logarithm of the number of local optimizations to perform
log_num_local_optimization_per_level

# Tolerance for constraints/auxiliary variables
feas_tolerance

# Use quadratic expressions and related exprQuad class
use_quadratic

