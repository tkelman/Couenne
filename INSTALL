Installing Couenne

There are three steps to installing Couenne:
 - uncompressing couenne.tgz;
 - obtaining the externals and third party packages;
 - compiling [and testing].

Couenne currently works on Linux machines.



1. Unzipping Couenne. #########################################

Place the couenne.tgz in a directory of your choice. Then run

$ tar xzf couenne.tgz

There should be a directory named Couenne/ now.



2. Obtaining all externals. ###################################

If you already have all COIN-OR packages necessary to build Couenne,
i.e., Cbc, Clp, Ipopt, Bonmin, Cgl, and all Third Party packages
Lapack, Blas, ASL, and HSL, you may move to section 3. The configuring
script should be able to find those packages.

Couenne uses other COIN-OR packages: Cbc, Clp, Ipopt, Bonmin, Cgl,
CoinUtils, and BuildTools. These are not included in the .tgz,
therefore you need to download them using Subversion. Simply run the
script file getExternals.sh located in the Couenne/ directory:

$ cd Couenne
$ ./getExternals.sh

THIRD PARTY PACKAGES: Couenne also requires that third party packages
be downloaded and installed by the user (unless they are already on
his/her machine) that cannot be found on the COIN-OR repository. These
are ASL, Blas, Lapack, and HSL. For the first three, simply move to
the corresponding directory and run the get.XXXX script file. For
instance, ASL can be downloaded as follows:

$ cd ThirdParty/ASL
$ ./get.ASL
$ cd ../..

and similarly for Blas and Lapack. To download HSL, see the
instructions in ThirdParty/HSL/INSTALL.HSL to obtain two files that
are necessary to Ipopt.



3. Compiling. #################################################

To build Couenne, you may just run the following two commands:

$ ./configure
$ make

However, it is usually desirable to have several builds in separate
sub-directories.  To do so, create a subdirectory and run
configure and make from there:

$ mkdir build1
$ cd build1
$ ../configure
$ make

The libraries and executables are by default installed in the
directory where you run the configure/make scripts. However, by
properly setting the configure option --prefix, you can install
Couenne in a different directory:

$ ../configure --prefix=/usr/local

This installs executables in /usr/local/bin and libraries in
/usr/local/lib.  You may have to run the last command as a super user.



4. Testing. ###################################################

There are a few built-in tests to check that Couenne is installed
properly and that it solves certain MINLPs correctly.  Before running
make install, you may run

$ make unitTest

to test most features of Couenne (reliability branching, bound
tightening, etc).  The test may take a few minutes as several MINLP
problems are solved in the process, each resulting in a short output
line:

$ make unitTest

  Testing couenne.opt.vt
    Test for couenne.opt.vt       on alkyl                OK
    Test for couenne.opt.vt       on batchdes             OK
    ...
    Test for couenne.opt.strong_int_br on nvs01                OK
    Test for couenne.opt.strong_int_br on pb0                  OK
    Test for couenne.opt.strong_int_br on st_e01               OK

Test succeeded.
$

If all these tests return OK, congratulations! You have set up Couenne
correctly.  It is safe now to install Couenne.



5. Installing and using Couenne. ##############################

Simply run

$ make install

to install header files, libraries, and executables as specified by
the --prefix option given at the configure command. For instance, if
option "--prefix=/usr/local/" was given, now the couenne executable is
found in /usr/local/bin/couenne and you may invoke it simply by

$ couenne stub.nl

(assuming /usr/local/bin is included in your $PATH environent
variable). If no such option was used, the executable of Couenne is
found in the bin/ directory. In this case, simply run

$ bin/couenne stub.nl

Where stub.nl is a nonlinear programming problem file created with
AMPL. Stub files can be generated from AMPL as follows: consider a
model file xyz.mod and a data file xyz.dat. Run the following AMPL
commands:

$ ampl
ampl: model xyz.mod
ampl: data xyz.dat
ampl: write gxyz;
ampl: quit;

This will create a stub file xyz.nl that can be fed to Couenne (notice
the "g" after the "write" keyword).



6. Documentation ##############################################

Doxygen documentation can be generated by running

$ make doxydoc

from the same build/ directory where you ran configure, make, and make
install. Documentation in both html and LaTeX format can be found in
the Doc/ subdirectory. Fire up your browser and take a look at
Doc/html/index.html for documentation of Couenne.
